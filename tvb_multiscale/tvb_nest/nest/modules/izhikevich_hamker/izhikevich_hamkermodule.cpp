
/*
*  izhikevich_hamkermodule.cpp
*
*  This file is part of NEST.
*
*  Copyright (C) 2004 The NEST Initiative
*
*  NEST is free software: you can redistribute it and/or modify
*  it under the terms of the GNU General Public License as published by
*  the Free Software Foundation, either version 2 of the License, or
*  (at your option) any later version.
*
*  NEST is distributed in the hope that it will be useful,
*  but WITHOUT ANY WARRANTY; without even the implied warranty of
*  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
*  GNU General Public License for more details.
*
*  You should have received a copy of the GNU General Public License
*  along with NEST.  If not, see <http://www.gnu.org/licenses/>.
*
*  2019-11-14 14:51:07.526268
*/

// Generated includes:
#include "config.h"

// Includes from nestkernel:
#include "connection_manager_impl.h"
#include "connector_model_impl.h"
#include "dynamicloader.h"
#include "exceptions.h"
#include "genericmodel.h"
#include "genericmodel_impl.h"
#include "kernel_manager.h"
#include "model.h"
#include "model_manager_impl.h"
#include "nestmodule.h"
#include "target_identifier.h"

// Includes from sli:
#include "booldatum.h"
#include "integerdatum.h"
#include "sliexceptions.h"
#include "tokenarray.h"

// include headers with your own stuff
#include "izhikevich_hamkermodule.h"


#include "izhikevich_hamker.h"

// -- Interface to dynamic module loader ---------------------------------------

/*
* There are three scenarios, in which MyModule can be loaded by NEST:
*
* 1) When loading your module with `Install`, the dynamic module loader must
* be able to find your module. You make the module known to the loader by
* defining an instance of your module class in global scope. (LTX_MODULE is
* defined) This instance must have the name
*
* <modulename>_LTX_mod
*
* The dynamicloader can then load modulename and search for symbol "mod" in it.
*
* 2) When you link the library dynamically with NEST during compilation, a new
* object has to be created. In the constructor the DynamicLoaderModule will
* register your module. (LINKED_MODULE is defined)
*
* 3) When you link the library statically with NEST during compilation, the
* registration will take place in the file `static_modules.h`, which is
* generated by cmake.
*/
#if defined(LTX_MODULE) | defined(LINKED_MODULE)
izhikevich_hamkermodule izhikevich_hamkermodule_LTX_mod;
#endif

// -- DynModule functions ------------------------------------------------------

izhikevich_hamkermodule::izhikevich_hamkermodule()
{
#ifdef LINKED_MODULE
  // register this module at the dynamic loader
  // this is needed to allow for linking in this module at compile time
  // all registered modules will be initialized by the main app's dynamic loader
  nest::DynamicLoaderModule::registerLinkedModule( this );
#endif
}

izhikevich_hamkermodule::~izhikevich_hamkermodule()
{
}

const std::string
izhikevich_hamkermodule::name(void) const
{
  return std::string("izhikevich_hamkermodule"); // Return name of the module
}

const std::string
izhikevich_hamkermodule::commandstring( void ) const
{
  // Instruct the interpreter to load izhikevich_hamkermodule-init.sli
  return std::string( "(izhikevich_hamkermodule-init) run" );
}

//-------------------------------------------------------------------------------------
void
izhikevich_hamkermodule::init( SLIInterpreter* i )
{
  
    nest::kernel().model_manager.register_node_model<nest::izhikevich_hamker>("izhikevich_hamker");
  
} // izhikevich_hamkermodule::init()